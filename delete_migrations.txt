for /d /r . %d in (__pycache__) do @if exist "%d" rd /s /q "%d"

for /d /r . %d in (__pycache__) do @if exist "%d" rd /s /q "%d"

python manage.py makemigrations
python manage.py migrate

python manage.py shell


from apps.core.models import Client, Domain

# Optional: See what fields are in the Client model
print("Client fields:", [f.name for f in Client._meta.get_fields()])

# Create the public tenant (make sure 'schema_name' is 'public')
public_tenant = Client(
    schema_name='public',
    name='Public Tenant'
    # Add any other required fields if defined in your Client model
)
public_tenant.save()

# Create domain for public tenant (NO http://, just hostname)
domain = Domain(
    domain='public.localhost',  # <-- use this instead of 127.0.0.1
    tenant=public_tenant,
    is_primary=True
)
domain.save()

print("✅ Public tenant and domain created successfully!")




python manage.py createsuperuser


Step 1: Backup (optional but recommended)
If you have any data you want to keep, back it up now.

Step 2: Drop the existing database
Use your DB client or psql CLI to drop the old DB, then create a fresh empty DB.

Example with PostgreSQL CLI:

bash
Copy
Edit
psql -U your_db_user
DROP DATABASE your_db_name;
CREATE DATABASE your_db_name;
\q
Step 3: Apply migrations
Run all migrations to create tables for public + tenant schemas:

bash
Copy
Edit
python manage.py migrate_schemas --shared
or if you don’t use migrate_schemas, then:

bash
Copy
Edit
python manage.py migrate
This creates all tables in the public schema.

Step 4: Create the public tenant
In your django-tenants setup, the public tenant should already exist after migrations. If not, create it:

bash
Copy
Edit
python manage.py shell
python
Copy
Edit
from django_tenants.utils import get_tenant_model

TenantModel = get_tenant_model()

if not TenantModel.objects.filter(schema_name='public').exists():
    public_tenant = TenantModel(schema_name='public', name='Public Tenant')
    public_tenant.save()
else:
    public_tenant = TenantModel.objects.get(schema_name='public')

print(public_tenant)
exit()


from django_tenants.utils import get_tenant_model
from apps.core.models import Domain

# Get the tenant model (usually your Client model)
TenantModel = get_tenant_model()

# Create or get the 'main' tenant
main_tenant, created_main = TenantModel.objects.get_or_create(
    schema_name='main',
    defaults={'name': 'Main Tenant'}
)
if created_main:
    print("Created main tenant")
else:
    print("Main tenant already exists")

# Create or get the 'public' tenant
public_tenant, created_public = TenantModel.objects.get_or_create(
    schema_name='public',
    defaults={'name': 'Public Tenant'}
)
if created_public:
    print("Created public tenant")
else:
    print("Public tenant already exists")

# Assign domains to tenants using update_or_create (safe for re-running)
Domain.objects.update_or_create(
    domain='public.localhost',
    defaults={'tenant': public_tenant, 'is_primary': True}
)

Domain.objects.update_or_create(
    domain='localhost',
    defaults={'tenant': main_tenant, 'is_primary': True}
)

Domain.objects.update_or_create(
    domain='127.0.0.1',
    defaults={'tenant': main_tenant, 'is_primary': True}
)

print("✅ Domains assigned successfully.")

Step 7: Run migrations on tenant schema
You must migrate the tenant schema tables:

python manage.py migrate_schemas -s main


Step 8: Create superuser in the public schema

python manage.py createsuperuser

http://public.localhost:8000/superadmin/
Step 9: Create tenant users
To create users inside tenant schema (main):


python manage.py shell

from django_tenants.utils import schema_context
from django.contrib.auth import get_user_model

User = get_user_model()

with schema_context('main'):
    # Create user devhiroshi77@gmail.com
    if not User.objects.filter(username='devhiroshi77').exists():
        User.objects.create_user(
            username='devhiroshi77',
            email='devhiroshi77@gmail.com',
            password='Password123!@#'
        )
        print("User devhiroshi77 created in 'main' schema.")
    else:
        print("User devhiroshi77 already exists.")

    # Create user joshua.andrews.ckr@gmail.com
    if not User.objects.filter(username='joshua.andrews.ckr').exists():
        User.objects.create_user(
            username='joshua.andrews.ckr',
            email='joshua.andrews.ckr@gmail.com',
            password='Password123!@#'
        )
        print("User joshua.andrews.ckr created in 'main' schema.")
    else:
        print("User joshua.andrews.ckr already exists.")

exit()
Step 10: Configure your frontend/backend
Your frontend (e.g., at localhost:3000) should call backend APIs at localhost:8000.

Make sure CORS allows http://localhost:3000.

Use middleware or domains so /superadmin is served only on public.localhost.

Step 11: Test everything
Open http://public.localhost:8000/superadmin/ → login with superuser.

Open http://localhost:8000/ → tenant main site.

Check tenant admin login if needed.

Test your frontend login at http://localhost:3000/login.

Extra tips:
Update your OS hosts file to map public.localhost → 127.0.0.1:

cpp
Copy
Edit
127.0.0.1 public.localhost
127.0.0.1 localhost





Fix it by linking that user to the main tenant:
Run this in Django shell:

python
Copy
Edit
from django_tenants.utils import get_tenant_model, schema_context
from django.contrib.auth import get_user_model

Tenant = get_tenant_model()
User = get_user_model()

tenant = Tenant.objects.get(schema_name="main")

with schema_context('main'):
    user = User.objects.get(email="devhiroshi77@gmail.com")
    user.tenants.add(tenant)
    user.save()
    print(f"✅ Linked {user.email} to tenant {tenant.schema_name}")






Step 2: Run the following commands (replace email/password as needed)
python
Copy
Edit
from apps.core.models import User  # or wherever your User model is

# Try to get existing user by email
email = "develirc@gmail.com"
password = "Passrd123!@#"

try:
    user = User.objects.get(email=email)
    print(f"User found: {user.email}")
except User.DoesNotExist:
    user = User.objects.create_user(email=email, password=password, username="develirc")
    print("Created new user:", user.email)

# Set required superadmin flags
user.is_superadmin = True
user.is_staff = True
user.is_active = True

# Set password (in case you want to reset it)
user.set_password(password)

user.save()
print(f"Superadmin user ready: {user.email}")



from django_tenants.utils import get_tenant_model
from apps.core.models import Domain

# Step 1: Get your tenant model
TenantModel = get_tenant_model()

# Step 2: Get or create the main tenant
main_tenant, created_main = TenantModel.objects.get_or_create(
    schema_name='main',
    defaults={'name': 'Main Tenant'}
)
if created_main:
    print("✅ Created main tenant")
else:
    print("ℹ️ Main tenant already exists")

# Step 3: Create or get the ngrok domain
ngrok_domain, created_domain = Domain.objects.get_or_create(
    domain='5d94efa70c36.ngrok-free.app',
    tenant=main_tenant,
    defaults={'is_primary': False}
)

if created_domain:
    print("✅ Ngrok domain added to main tenant")
else:
    print("ℹ️ Ngrok domain already exists for this tenant")





from django_tenants.utils import schema_context
from apps.team_inbox.models import Conversation, Message, Inbox, ChannelAccount, TeamMember

with schema_context('main'):
    Message.objects.all().delete()
    Conversation.objects.all().delete()
    Inbox.objects.all().delete()
    ChannelAccount.objects.all().delete()
    TeamMember.objects.all().delete()

print("✅ Deleted all records in the 'main' schema.")



from django_tenants.utils import schema_context
from apps.core.models import Client, Domain, User, TenantEmailMapping

with schema_context('public'):
    # Respect model dependencies (FK / M2M)
    TenantEmailMapping.objects.all().delete()
    User.objects.all().delete()
    Domain.objects.all().delete()
    Client.objects.all().delete()

print("✅ Deleted all records in the 'public' schema from apps.core.models.")




from django.db import connection
from django_tenants.utils import schema_context

tables = [
    "core_user_tenants",
    "core_tenantemailmapping",
    "core_domain",
    "core_user",
    "core_client",
]

with schema_context("public"):
    with connection.cursor() as cursor:
        for table in tables:
            try:
                cursor.execute(f'TRUNCATE TABLE "{table}" CASCADE;')
                print(f"✅ Truncated {table} (all rows deleted, FKs cascaded)")
            except Exception as e:
                print(f"⚠️ Skipped {table} (reason: {e})")

print("🎉 Finished wiping all records in public schema (apps.core.models).")



